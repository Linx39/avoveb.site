const initServisesSwiper = () =>
  new Swiper(".services__swiper", {
    watchSlidesProgress: !0,
    slideVisibleClass: "services__slide_visible",
    loop: !0,
    navigation: {
      prevEl: ".services__swiper__buttonPrev",
      nextEl: ".services__swiper__buttonNext",
    },
    pagination: {
      el: ".services__swiper__pagination",
      bulletClass: "slider__bullet",
      bulletActiveClass: "slider__bullet_current",
    },
    breakpoints: {
      320: { slidesPerView: 1, spaceBetween: 16 },
      560: { slidesPerView: 2, spaceBetween: 16 },
      760: { slidesPerView: 3, spaceBetween: 16 },
      960: { maxBackfaceHiddenSlides: 0 },
    },
  });
let isServisesSwiperInit = !1,
  servisesSwiper = Swiper;
const setServisesSwiperMode = () => {
  const e = window.matchMedia("(min-width: 960px)").matches;
  e ||
    isServisesSwiperInit ||
    ((servisesSwiper = initServisesSwiper()), (isServisesSwiperInit = !0)),
    e &&
      isServisesSwiperInit &&
      (servisesSwiper.destroy(), (isServisesSwiperInit = !1));
};
window.addEventListener("DOMContentLoaded", () => {
  setServisesSwiperMode();
}),
  window.addEventListener("resize", () => {
    setServisesSwiperMode();
  });
const initReviewsSwiper = () => {
  const e = !navigator.userAgent.includes("Firefox");
  return new Swiper(".reviews__swiper", {
    watchSlidesProgress: !0,
    slideVisibleClass: "review__slide_visible",
    loop: e,
    navigation: {
      prevEl: ".reviews__swiper__buttonPrev",
      nextEl: ".reviews__swiper__buttonNext",
      disabledClass: "navigationButton_disabled",
    },
    pagination: {
      el: ".reviews__swiper__pagination",
      bulletClass: "slider__bullet",
      bulletActiveClass: "slider__bullet_current",
      clickable: !0,
    },
    breakpoints: {
      320: { slidesPerView: 1, spaceBetween: 20 },
      560: { slidesPerView: 2, spaceBetween: 16 },
      760: { slidesPerView: 3, spaceBetween: 16 },
      960: { slidesPerView: 3, spaceBetween: 20 },
      1200: { slidesPerView: 3, spaceBetween: 28 },
      1700: { slidesPerView: 3, spaceBetween: 32 },
    },
  });
};
initReviewsSwiper(),
  new Swiper(".certificates__swiper", {
    navigation: {
      prevEl: ".certificates__swiper__buttonPrev",
      nextEl: ".certificates__swiper__buttonNext",
      disabledClass: "navigationButton_disabled",
    },
    pagination: {
      el: ".certificates__swiper__pagination",
      bulletClass: "slider__bullet",
      bulletActiveClass: "slider__bullet_current",
      clickable: !0,
    },
    breakpoints: {
      320: { slidesPerView: 2, slidesPerGroup: 2, spaceBetween: 12 },
      560: { slidesPerView: 3, slidesPerGroup: 3, spaceBetween: 12 },
      760: { slidesPerView: 3, slidesPerGroup: 3, spaceBetween: 8 },
      960: { slidesPerView: 3, slidesPerGroup: 3, spaceBetween: 20 },
      1200: { slidesPerView: 3, slidesPerGroup: 3, spaceBetween: 28 },
      1700: { slidesPerView: 3, slidesPerGroup: 3, spaceBetween: 32 },
    },
  });
const topbar = document.querySelector(".topbar"),
  sidebar = document.querySelector(".sidebar"),
  sidebarLinks = sidebar.querySelectorAll(".sidebar__link"),
  getElementByHref = (e) => document.querySelector(e.getAttribute("href")),
  setScrollMarginTop = () => {
    sidebarLinks.forEach((e) => {
      const s = getElementByHref(e),
        i = topbar.clientHeight - 5;
      s.style.scrollMarginTop = `${i}px`;
    });
  };
window.addEventListener("load", () => {
  setScrollMarginTop();
}),
  window.addEventListener("resize", () => {
    setScrollMarginTop();
  });
let elementByLink = null;
sidebarLinks.forEach((e) => {
  e.addEventListener("click", (s) => {
    s.preventDefault(), (elementByLink = getElementByHref(e));
  });
});
const scrollToLinks = (e) => {
    e && e.scrollIntoView({ behavior: "smooth", block: "start" });
  },
  MODAL_ANIMATION_CLASS = "modalAnimation";
(setAnimationTrue = (e, s) => {
  e._modalBlock &&
    (e._modalBlock.classList.add(s), (e.config.waitTransitions = !0));
}),
  (setAnimationFalse = (e, s) => {
    e._modalBlock &&
      (e._modalBlock.classList.remove(s), (e.config.waitTransitions = !1));
  });
const HYSTMODAL_SHADOW_BLACK_CLASS = "hystmodal__shadow_black",
  addShadowClass = () => {
    document
      .querySelector(".hystmodal__shadow")
      .classList.add("hystmodal__shadow_black");
  },
  removeShadowClass = () => {
    document
      .querySelector(".hystmodal__shadow")
      .classList.remove("hystmodal__shadow_black");
  },
  videoModal = new HystModal({
    linkAttributeName: "data-video",
    waitTransitions: !0,
    beforeOpen: () => addShadowClass(),
    afterClose: () => removeShadowClass(),
  }),
  sidebarModal = new HystModal({
    linkAttributeName: "data-sidebar",
    waitTransitions: !0,
    afterClose: () => scrollToLinks(elementByLink),
  }),
  servicesModal = new HystModal({
    linkAttributeName: "data-services",
    waitTransitions: !0,
  }),
  feedbackModal = new HystModal({
    linkAttributeName: "data-feedback",
    waitTransitions: !0,
    beforeOpen: () => {
      setAnimationFalse(servicesModal, "modalAnimation"), servicesModal.close();
    },
    afterClose: () => {
      setAnimationTrue(servicesModal, "modalAnimation");
    },
  }),
  certificatesModal = new HystModal({
    linkAttributeName: "data-certificates",
    waitTransitions: !0,
  }),
  certificateModal = new HystModal({
    linkAttributeName: "data-sertificate",
    waitTransitions: !0,
    beforeOpen: () => {
      setAnimationFalse(certificatesModal, "modalAnimation"),
        certificatesModal.close();
    },
    afterClose: () => {
      certificatesModal.open(),
        setAnimationTrue(certificatesModal, "modalAnimation");
    },
  }),
  reviewModal = new HystModal({
    linkAttributeName: "data-review",
    waitTransitions: !0,
  }),
  SCROLL_UP_SHOW_CLASS = "scrollUp_show",
  SCROLL_HEIGHT = window.innerHeight,
  scrollUp = document.querySelector(".scrollUp"),
  btnUp = document.querySelector(".scrollUp__button");
window.addEventListener("scroll", () => {
  window.pageYOffset > SCROLL_HEIGHT
    ? scrollUp.classList.add("scrollUp_show")
    : scrollUp.classList.remove("scrollUp_show");
}),
  btnUp.addEventListener("click", (e) => {
    e.preventDefault(), window.scrollTo({ top: 0, behavior: "smooth" });
  });
const STAGES_ITEM_CURRENT_CLASS = "stages__item_current",
  STAGES_ITEM_NEARBY_CLASS = "stages__item_nearby",
  stagesItems = document.querySelectorAll(".stages__item");
stagesItems.forEach((e) => {
  e.addEventListener("click", () => {
    const s = document.querySelector(".stages__item_current");
    if (e !== s) {
      stagesItems.forEach((e) => e.classList.remove("stages__item_nearby")),
        s.classList.remove("stages__item_current"),
        e.classList.add("stages__item_current");
      const i = [...stagesItems],
        t = i.indexOf(e);
      i[t - 1] && i[t - 1].classList.add("stages__item_nearby"),
        i[t + 1] && i[t + 1].classList.add("stages__item_nearby");
    }
  });
});
